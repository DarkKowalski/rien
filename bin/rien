#!/bin/ruby

require 'optparse'
require 'rien'
require 'fileutils'
require 'ruby-progressbar'

options = {
  mode: :help,
}

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: rien [options]'
  opts.on('-e', '--encode [FILE]', 'Encode specific ruby file', String) do |v|
    options[:mode] = :encode
    options[:file] = v
    options[:output] ||= "output.rb"
  end

  opts.on('-p', '--pack [DIR]', 'Pack ruby directory into encoded files', String) do |v|
    options[:mode] = :pack
    options[:file] = v
    options[:output] ||= "rien_output"
  end

  opts.on('-o' '--out [FILE/DIR]', 'Indicate the output of the encoded file(s)', String) do |v|
    options[:output] = v
  end
end

parser.parse!

case options[:mode]
when :encode
  encoder = Rien::Encoder.new
  bytes = encoder.encode_file(options[:file])
  generated_name = options[:output]
  # Check if end with .rb and no files generated existing

  File.open("#{generated_name}.rbc", 'wb') do |f|
    f.write bytes
  end

  File.open(generated_name, 'w') do |f|
    f.write encoder.bootstrap
  end
when :pack
  source = options[:file]
  destination = options[:output]
  FileUtils.cp_r source, destination
  encoder = Rien::Encoder.new
  
  files = Dir.glob(File.join(destination, "**/*.rb"))
  progressbar = ProgressBar.create(:title => "Generating", :starting_at => 0, :total => files.length)

  files.each do |path|
    progressbar.log("Compiling: #{path}")
    begin
      bytes = encoder.encode_file(path)
      File.open("#{path}.rbc", 'wb') do |f|
        f.write bytes
      end
  
      # Replace file with bootstrap
      FileUtils.rm(path)
      File.open(path, 'w') do |f|
        f.write encoder.bootstrap
      end

      progressbar.increment
    rescue Exception
      # ignore
      progressbar.increment
    end
  end
when :help
  puts parser
else
  puts parser
end
